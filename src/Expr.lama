-- Expression evaluator

import List;
import State;

public fun assocOpt(oprStr) {
  case oprStr of
      "+"  -> infix +
    | "-"  -> infix - 
    | "*"  -> infix *
    | "/"  -> infix /
    | "%"  -> infix %
    | "==" -> infix ==
    | "!=" -> infix !=
    | "<"  -> infix <
    | "<=" -> infix <=
    | ">"  -> infix >
    | ">=" -> infix >=
    | "&&" -> infix &&
    | "!!" -> infix !!
  esac
}


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Const(n) -> n
  | Var(v)   -> st(v)
  | Binop(oprStr, l, r) -> assocOpt(oprStr)(evalExpr(st, l), evalExpr(st, r))
  esac
}
