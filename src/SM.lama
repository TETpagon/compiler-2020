-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, w], insns) {
  case insns of
    {} -> c
    | BINOP(op) : insns -> case stack of
        x : y : stack -> eval(env, [assocOpt(op)(y, x) : stack, st, w], insns)
      esac
    | CONST(n) : insns -> eval(env, [n : stack, st, w], insns)
    | READ : insns -> case readWorld(w) of
        [n, w] -> eval(env, [n:stack, st, w], insns)
      esac
    | WRITE : insns -> case stack of
        n : stack -> eval(env, [stack, st, writeWorld(n, w)], insns)
      esac
    | LD(x) : insns -> eval(env, [st(x) : stack, st, w], insns)
    | ST(x) : insns -> case stack of
        n : stack -> eval(env, [stack, st <- [x, n], w], insns)
      esac
    | LABEL (_) : insns -> eval(env, c, insns)
    | JMP (label) : insns -> eval(env, c, fromLabel(env, label))
    | CJMP ("nz", label) : insns -> case stack of
        0 : stack -> eval(env, [stack, st, w], insns)
        | _ : stack -> eval(env, [stack, st, w], fromLabel(env, label))
      esac
    | CJMP ("z", label) : insns -> case stack of
        0 : stack -> eval(env, [stack, st, w], fromLabel(env, label))
        | _ : stack -> eval(env, [stack, st, w], insns)
      esac  
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  deepFlatten(doCompileExpr(expr))	
}
fun doCompileExpr (expr) {
  case expr of
    Const(n) -> singleton(CONST(n))
    | Var(x) -> singleton(LD(x))
    | Binop(op, l, r) -> {doCompileExpr(l), doCompileExpr(r), BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  deepFlatten(doCompileSM(stmt, initCompEnv())[0])
}

fun doCompileSM (stmt, env) {
      case stmt of
        Skip -> [{}, env]
      | Assn(x, e) -> [{compileExpr(e), ST(x)}, env]
      | Read(x) -> [{READ, ST(x)}, env]
      | Write(e) -> [{compileExpr(e), WRITE}, env]
      | Seq(s1, s2) -> 
          case doCompileSM(s1, env) of [cs1, env1] -> 
            case doCompileSM(s2, env1) of [cs2, env2] -> 
              [{cs1, cs2}, env2]
            esac
          esac
      | If(e, s1, s2) -> 
          case genLabels(env, 2) of [ls2, lexit, env1] ->
            case doCompileSM(s1, env1) of [cs1, env2] ->
              case doCompileSM(s2, env2) of [cs2, env3] ->
                [{compileExpr(e), CJMP("z", ls2), cs1, JMP(lexit), LABEL(ls2), cs2, LABEL(lexit)}, env3]
              esac
            esac 
          esac
      | While(e, s1) -> 
          case genLabels(env, 2) of [le, ls, env1] ->
            case doCompileSM(s1, env1) of [cs1, env2] ->
              [{JMP(le), LABEL(ls), cs1, LABEL(le), compileExpr(e), CJMP("nz", ls)}, env2]
            esac 
          esac
      | Repeat(s1, e) ->
          case genLabels(env, 1) of [ls, env1] ->
            case doCompileSM(s1, env1) of [cs1, env2] ->
              [{LABEL(ls), cs1, compileExpr(e), CJMP("z", ls)}, env2]
            esac 
          esac
      esac
  }
