-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
  case insns of
      {} -> c
    | READ : insns -> case readWorld(w) of
        [n, w] -> eval([n:stack, st, w], insns)
      esac
    | WRITE : insns -> case stack of
        n : stack -> eval([stack, st, writeWorld(n, w)], insns)
      esac
    | CONST(n) : insns -> eval([n : stack, st, w], insns)
    | BINOP(operator) : insns -> case stack of
        x : y : stack -> eval([calculateBinop(operator, y, x) : stack, st, w], insns)
      esac
    | LD(x) : insns -> eval([st(x) : stack, st, w], insns)
    | ST(x) : insns -> case stack of
        n : stack -> eval([stack, st <- [x, n], w], insns)
      esac	
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Const (n) -> singleton (CONST (n))
  | Var (x) -> singleton (LD (x))
  | Binop (op, lhs, rhs) -> {compileExpr (lhs), compileExpr (rhs), BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  deepFlatten(doCompileSM(stmt))
}

fun doCompileSM(stmt) {
  case stmt of
      Assn(x, e) -> {compileExpr(e), ST(x)}
    | Seq(s1, s2) -> {doCompileSM(s1), doCompileSM(s2)}
    | Skip -> {}
    | Read(x) -> {READ, ST(x)}
    | Write(e) -> {compileExpr(e), WRITE}
  esac
}
